# user       www www;  ## Default: nobody
#error_log  logs/error.log;
#pid        logs/nginx.pid;
#worker_rlimit_nofile 8192;

# Ideally # of worker processes = # of CPUs or cores
# Set to auto to autodetect
# max_clients = worker_processes * worker_connections
worker_processes auto;


pid /run/nginx.pid;

# Maximum number of open file descriptors per process
# should be > worker_connections
worker_rlimit_nofile 10240;

events {
    # Use epoll on Linux 2.6+
    use epoll;

    # Max number of simultaneous connections per worker process
    worker_connections 2048;
    # Accept all new connections at one time
    multi_accept on;
}

http {
  # include    conf/mime.types;
  # include    /etc/nginx/proxy.conf;
  # include    /etc/nginx/fastcgi.conf;
#   index    index.html index.htm index.php;

  default_type application/octet-stream;
  # log_format   main '$remote_addr - $remote_user [$time_local]  $status '
  #   '"$request" $body_bytes_sent "$http_referer" '
  #   '"$http_user_agent" "$http_x_forwarded_for"';
  # access_log   logs/access.log  main;
  sendfile     on;
  tcp_nopush   on;
  server_names_hash_bucket_size 128; # this seems to be required for some vhosts

# php/fastcgi
  # server { 
  #   listen       80;
  #   server_name  domain1.com www.domain1.com;
  #   access_log   logs/domain1.access.log  main;
  #   root         html;

  #   location ~ \.php$ {
  #     fastcgi_pass   127.0.0.1:1025;
  #   }
  # }

  # server { # simple reverse-proxy
  #   listen       80;
  #   server_name  domain2.com www.domain2.com;
  #   access_log   logs/domain2.access.log  main;

  #   # serve static files
  #   location ~ ^/(images|javascript|js|css|flash|media|static)/  {
  #     root    /var/www/virtual/big.server.com/htdocs;
  #     expires 30d;
  #   }

  #   # pass requests for dynamic content to rails/turbogears/zope, et al
  #   location / {
  #     proxy_pass      http://127.0.0.1:8080;
  #   }
  # }

  upstream node {
    server http-nodejs-preview-5932.up.railway.app:80;
  }

  server { 
    listen          80;
    server_name default;
    
    location / {
      # Docker default DNS
      resolver 127.0.0.11;
      # resolver railway.internal;

      proxy_pass      http://node;
      proxy_redirect https://myserver/ http://nginx_server:8080/;


        proxy_redirect default;
        proxy_http_version                      1.1;
        proxy_set_header Connection             "";
        proxy_set_header Host                   $host;
        proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host       $host;
        proxy_set_header X-Forwarded-Server     $host;
        proxy_set_header X-Forwarded-Proto      $scheme;
         
    }
  }
}